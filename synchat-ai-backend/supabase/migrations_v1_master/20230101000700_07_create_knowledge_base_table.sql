-- Define the public.knowledge_base table and its associated FTS and vector indexing mechanisms

CREATE TABLE IF NOT EXISTS public.knowledge_base (
    id BIGSERIAL PRIMARY KEY,
    client_id UUID NOT NULL REFERENCES public.synchat_clients(client_id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    embedding VECTOR(1536) NULL, -- Dimension matches embeddingService.js
    metadata JSONB NULL,
    fts TSVECTOR NULL, -- For Full-Text Search, generated by trigger
    language_config REGCONFIG DEFAULT 'pg_catalog.spanish', -- Store language config for FTS/headline
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Comments for knowledge_base table
COMMENT ON TABLE public.knowledge_base IS 'Stores chunks of text, their embeddings, and metadata for client-specific knowledge bases used for RAG.';
COMMENT ON COLUMN public.knowledge_base.id IS 'Unique identifier for the knowledge base entry.';
COMMENT ON COLUMN public.knowledge_base.client_id IS 'Identifier of the client to whom this knowledge base entry belongs. Foreign key to synchat_clients.';
COMMENT ON COLUMN public.knowledge_base.content IS 'Text content of the knowledge chunk.';
COMMENT ON COLUMN public.knowledge_base.embedding IS 'Vector embedding of the content (e.g., dimension 1536 for OpenAI text-embedding-3-small).';
COMMENT ON COLUMN public.knowledge_base.metadata IS 'JSONB field for storing additional information, like source URL or document structure.';
COMMENT ON COLUMN public.knowledge_base.fts IS 'Full-Text Search vector generated from the content, using the specified language_config.';
COMMENT ON COLUMN public.knowledge_base.language_config IS 'Text search configuration language for this chunk (e.g., ''pg_catalog.spanish'', ''pg_catalog.english''). Defaults to Spanish.';
COMMENT ON COLUMN public.knowledge_base.created_at IS 'Timestamp of when the knowledge base entry was created.';

-- FTS Trigger Function (Spanish configuration)
CREATE OR REPLACE FUNCTION public.fts_update_trigger_function()
RETURNS TRIGGER AS $$
BEGIN
  NEW.fts = to_tsvector(COALESCE(NEW.language_config, 'pg_catalog.spanish'), COALESCE(NEW.content, ''));
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

COMMENT ON FUNCTION public.fts_update_trigger_function() IS 'Updates the fts tsvector column in knowledge_base using the specified language_config (or Spanish default) upon content changes.';

-- FTS Trigger
-- Drop if exists from a potentially different old definition, then create.
DROP TRIGGER IF EXISTS update_knowledge_base_fts ON public.knowledge_base;
CREATE TRIGGER update_knowledge_base_fts
BEFORE INSERT OR UPDATE OF content, language_config ON public.knowledge_base
FOR EACH ROW
EXECUTE FUNCTION public.fts_update_trigger_function();

COMMENT ON TRIGGER update_knowledge_base_fts ON public.knowledge_base IS 'Automatically updates the fts column whenever the content or language_config column in knowledge_base is inserted or updated.';

-- Base Indexes (client_id, FTS GIN index)
CREATE INDEX IF NOT EXISTS idx_knowledge_base_client_id ON public.knowledge_base(client_id);
CREATE INDEX IF NOT EXISTS idx_knowledge_base_fts ON public.knowledge_base USING GIN(fts);
CREATE INDEX IF NOT EXISTS idx_knowledge_base_language_config ON public.knowledge_base(language_config);

-- Configurable Vector Index (IVFFlat or HNSW) - adapted from 20240601235600_configurable_vector_index.sql
DO $$
DECLARE
    total_vectors BIGINT;
    num_lists INTEGER;
    placeholder_total_vectors BIGINT := 100000; -- !! USER: REPLACE THIS WITH ACTUAL COUNT from SELECT count(*) FROM public.knowledge_base; !!

BEGIN
    BEGIN
        EXECUTE 'SELECT count(*) FROM public.knowledge_base' INTO total_vectors;
        IF total_vectors IS NULL OR total_vectors = 0 THEN
            total_vectors := placeholder_total_vectors;
            -- Using placeholder value
        ELSE
            null; -- Successfully determined total_vectors
        END IF;
    EXCEPTION
        WHEN undefined_table THEN
            total_vectors := placeholder_total_vectors;
            -- knowledge_base table not found, using placeholder
        WHEN OTHERS THEN
            total_vectors := placeholder_total_vectors;
            -- Error fetching total_vectors, using placeholder
    END;

    IF total_vectors > 0 AND total_vectors <= 1000000 THEN
        num_lists := GREATEST(100, LEAST(1000, (total_vectors / 1000)::INTEGER));
    ELSIF total_vectors > 1000000 THEN
        num_lists := GREATEST(100, LEAST(4000, (sqrt(total_vectors))::INTEGER));
    ELSE
        num_lists := 100;
    END IF;

    EXECUTE 'CREATE INDEX IF NOT EXISTS idx_knowledge_base_embedding ON public.knowledge_base USING ivfflat (embedding public.vector_cosine_ops) WITH (lists = ' || num_lists || ');';
    EXECUTE 'COMMENT ON INDEX public.idx_knowledge_base_embedding IS ''IVFFlat index for vector search. Current lists parameter: ' || num_lists || '. Tuned based on total vector count (N). Example: N/1000 for N<=1M, or sqrt(N) for N>1M.'';';

END $$;

-- HNSW Example (User should uncomment and use this if N is very large and HNSW is preferred):
/*
-- HNSW Option: If you intend to use HNSW, ensure the IVFFlat creation DO block above is commented out/modified.
DROP INDEX IF EXISTS public.idx_knowledge_base_embedding; -- Ensure only one index type is active
CREATE INDEX IF NOT EXISTS idx_knowledge_base_embedding_hnsw -- Consider consistent naming if switching
    ON public.knowledge_base
    USING hnsw (embedding public.vector_cosine_ops)
    WITH (m = 16, ef_construction = 64);
COMMENT ON INDEX public.idx_knowledge_base_embedding_hnsw -- Adjust name if changed
    IS 'HNSW index for vector search. M and ef_construction are starting parameters and can be tuned.';
-- Successfully created HNSW index (IF UNCOMMENTED).
*/
