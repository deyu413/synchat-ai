-- Define the public.analyzed_conversation_topics table

CREATE TABLE IF NOT EXISTS public.analyzed_conversation_topics (
    topic_id BIGSERIAL PRIMARY KEY,
    client_id UUID NOT NULL REFERENCES public.synchat_clients(client_id) ON DELETE CASCADE,
    topic_name TEXT NOT NULL,
    cluster_id_internal TEXT NULL, -- Renamed from cluster_id, added by 20250531070449
    example_queries JSONB NULL, -- Store a few example user_queries
    query_count INTEGER DEFAULT 0,
    last_calculated_at TIMESTAMPTZ DEFAULT now(),
    normalized_query_text TEXT NULL, -- Added by 20250531044008
    topic_generation_method TEXT NULL, -- Added by 20250531070449
    -- representative_queries JSONB NULL, -- This seems to be covered by example_queries or topic_name. Original script had it, js code uses example_queries. Sticking to what JS uses.
    -- example_interaction_ids BIGINT[] NULL, -- These were in JS but not in SQL migrations. Keeping schema closer to SQL.
    -- example_conversation_ids UUID[] NULL, -- Ditto
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Comments
COMMENT ON TABLE public.analyzed_conversation_topics IS 'Stores topics identified from conversation analysis, typically via query clustering and LLM labeling.';
COMMENT ON COLUMN public.analyzed_conversation_topics.topic_id IS 'Unique identifier for the topic.';
COMMENT ON COLUMN public.analyzed_conversation_topics.client_id IS 'Identifier of the client to whom this topic analysis belongs.';
COMMENT ON COLUMN public.analyzed_conversation_topics.topic_name IS 'Human-readable name for the identified topic/cluster (e.g., generated by an LLM).';
COMMENT ON COLUMN public.analyzed_conversation_topics.cluster_id_internal IS 'Internal cluster identifier from the clustering algorithm (e.g., K-Means cluster index). Was previously cluster_id.';
COMMENT ON COLUMN public.analyzed_conversation_topics.example_queries IS 'JSON array of sample user queries that fall under this topic.';
COMMENT ON COLUMN public.analyzed_conversation_topics.query_count IS 'Number of queries associated with this topic in the last calculation.';
COMMENT ON COLUMN public.analyzed_conversation_topics.last_calculated_at IS 'Timestamp of when this topic data was last generated or updated.';
COMMENT ON COLUMN public.analyzed_conversation_topics.normalized_query_text IS 'The normalized version of user queries or a representative text for this topic group.';
COMMENT ON COLUMN public.analyzed_conversation_topics.topic_generation_method IS 'Method used to generate this topic (e.g., ''normalized_grouping'', ''embedding_kmeans'').';
COMMENT ON COLUMN public.analyzed_conversation_topics.created_at IS 'Timestamp of when this topic entry was first created.';

-- Indexes
CREATE INDEX IF NOT EXISTS idx_analyzed_topics_client_id ON public.analyzed_conversation_topics(client_id);
CREATE INDEX IF NOT EXISTS idx_analyzed_topics_topic_name ON public.analyzed_conversation_topics(topic_name);
CREATE INDEX IF NOT EXISTS idx_analyzed_topics_cluster_id_internal ON public.analyzed_conversation_topics(cluster_id_internal WHERE cluster_id_internal IS NOT NULL);
CREATE INDEX IF NOT EXISTS idx_analyzed_topics_client_normalized_query ON public.analyzed_conversation_topics(client_id, normalized_query_text WHERE normalized_query_text IS NOT NULL);

RAISE NOTICE 'Table public.analyzed_conversation_topics created with all consolidated columns, comments, and indexes.';

-- RLS will be applied in a subsequent, dedicated RLS migration file.
ALTER TABLE public.analyzed_conversation_topics ENABLE ROW LEVEL SECURITY;
