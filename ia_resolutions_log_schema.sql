-- Schema for the ia_resolutions_log table
-- This table logs instances where the AI successfully resolves a user's query or completes a task,
-- which may be used for monitoring, analytics, and potentially for billing based on "resolutions".

-- Ensure uuid-ossp extension is available if UUIDs are generated by default elsewhere (e.g., in synchat_clients or conversations)
-- CREATE EXTENSION IF NOT EXISTS "uuid-ossp"; -- Not strictly needed for this table's defaults if FKs are just referencing

CREATE TABLE public.ia_resolutions_log (
    resolution_id BIGSERIAL PRIMARY KEY,
    client_id UUID NOT NULL,
    conversation_id UUID, -- Nullable, as a resolution might not always be tied to a specific conversation
    resolved_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    billing_cycle_id TEXT, -- To group resolutions by billing cycle, e.g., "2023-10"
    details JSONB, -- For storing specifics like user query and bot response summary

    CONSTRAINT fk_client
        FOREIGN KEY(client_id)
        REFERENCES public.synchat_clients(client_id)
        ON DELETE SET NULL, -- Or ON DELETE CASCADE, depending on desired behavior if client is deleted. SET NULL might be safer for logs.

    CONSTRAINT fk_conversation
        FOREIGN KEY(conversation_id)
        REFERENCES public.conversations(conversation_id)
        ON DELETE SET NULL -- If a conversation is deleted, we might still want to keep the resolution log entry, just nullify the link.
);

-- Notes on Indexes:
-- 1. Index on client_id for efficient querying of resolutions per client.
--    CREATE INDEX idx_ia_resolutions_log_client_id ON public.ia_resolutions_log(client_id);

-- 2. Index on conversation_id if you frequently look up resolutions tied to specific conversations.
--    CREATE INDEX idx_ia_resolutions_log_conversation_id ON public.ia_resolutions_log(conversation_id);

-- 3. Index on resolved_at for time-based analysis or filtering.
--    CREATE INDEX idx_ia_resolutions_log_resolved_at ON public.ia_resolutions_log(resolved_at);

-- 4. Index on billing_cycle_id for grouping and reporting related to billing.
--    CREATE INDEX idx_ia_resolutions_log_billing_cycle_id ON public.ia_resolutions_log(billing_cycle_id);

-- 5. If specific keys within the 'details' JSONB are frequently queried, consider a GIN index on those.
--    For example, if you often query by details->>'user_query':
--    CREATE INDEX idx_ia_resolutions_log_details_user_query ON public.ia_resolutions_log USING GIN ((details->>'user_query'));
--    Or for general JSONB operations:
--    CREATE INDEX idx_ia_resolutions_log_details_gin ON public.ia_resolutions_log USING GIN (details);


COMMENT ON TABLE public.ia_resolutions_log IS 'Logs each instance of an AI resolution, potentially for analytics or billing.';
COMMENT ON COLUMN public.ia_resolutions_log.resolution_id IS 'Unique identifier for the resolution event.';
COMMENT ON COLUMN public.ia_resolutions_log.client_id IS 'The client for whom the resolution occurred. Foreign key to synchat_clients.';
COMMENT ON COLUMN public.ia_resolutions_log.conversation_id IS 'The conversation in which the resolution occurred, if applicable. Foreign key to conversations.';
COMMENT ON COLUMN public.ia_resolutions_log.resolved_at IS 'Timestamp of when the resolution occurred.';
COMMENT ON COLUMN public.ia_resolutions_log.billing_cycle_id IS 'Identifier for the billing cycle this resolution falls into (e.g., YYYY-MM).';
COMMENT ON COLUMN public.ia_resolutions_log.details IS 'JSONB field to store additional details about the resolution, such as a summary of the user query and bot response.';

-- Note on ON DELETE behavior for Foreign Keys:
-- - For client_id: ON DELETE SET NULL is chosen to keep resolution logs even if a client is deleted.
--   If logs should be deleted with the client, change to ON DELETE CASCADE.
-- - For conversation_id: ON DELETE SET NULL is chosen to keep resolution logs even if the specific conversation is deleted.
--   If logs should be deleted with the conversation, change to ON DELETE CASCADE.
--   The choice depends on data retention policies.
